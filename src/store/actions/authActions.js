import axios from "axios";

import * as actionTypes from "./actionTypes";
import { API_KEY } from "../../private";

const SIGN_UP_URL =
  "https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=";
const SIGN_IN_URL =
  "https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=";

// Used to show the spinner while loading
const authStarted = () => {
  return {
    type: actionTypes.AUTH_STARTED,
  };
};

// Logs out the user and cleares the local storage
export const authLogOut = () => {
  // Clearing the local storage
  localStorage.removeItem("token");
  localStorage.removeItem("userId");
  localStorage.removeItem("tokenExpirationDate");

  // Returning the action
  return {
    type: actionTypes.AUTH_LOG_OUT,
  };
};

// Will have async code, responsible for signing in/up the users. Also, it stores the data to (token, userId, ...etc) in the local storage
export const auth = (data) => {
  return async (dispatch) => {
    dispatch(authStarted());
    let payload = {};
    try {
      payload = {
        email: data.email,
        password: data.password,
        returnSecureToken: true,
      };
      const res = await axios.post(
        `${data.signMode === "sign up" ? SIGN_UP_URL : SIGN_IN_URL}${API_KEY}`,
        payload
      );
      // Storing the token, userId, token expiration date in local storage
      const tokenExpirationDate = new Date(
        new Date().getTime() + res.data.expiresIn * 1000
      );
      //console.log("[auth function]" + tokenExpirationDate);
      localStorage.setItem("token", res.data.idToken);
      localStorage.setItem("userId", res.data.localId);
      localStorage.setItem("tokenExpirationDate", tokenExpirationDate);

      // Dispatching authSuccess and authTimeToExpire actions
      dispatch(authSuccess(res.data.idToken, res.data.localId));
      dispatch(authTimeToExpire(res.data.expiresIn));
    } catch (e) {
      dispatch(authFail(e));
    }
  };
};

// In case of user successfully signed in/up
const authSuccess = (token, userId) => {
  return {
    type: actionTypes.AUTH_SUCCESS,
    payload: {
      token,
      userId,
    },
  };
};

// In case of user failed to sign in/up
const authFail = (error) => {
  return {
    type: actionTypes.AUTH_FAIL,
    error,
  };
};

// Takes the time (in seconds) that after which the token generated by firebase when the user signs in or up will expire
const authTimeToExpire = (timeToExpire) => {
  return (dispatch) => {
    setTimeout(() => {
      dispatch(authLogOut());
    }, timeToExpire * 1000);
  };
};

// Will be dispatched from the main 'app.js' file container at componentDidMount() method to ckeck if a valid token exists in the local storage
export const checkAuthState = () => {
  return (dispatch) => {
    const token = localStorage.getItem("token");
    if (!token) {
      // Here, we didn't find a token in the local storage
      dispatch(authLogOut());
    } else {
      const expirationDate = localStorage.getItem("tokenExpirationDate");
      if (new Date(expirationDate) <= new Date()) {
        // If that condition is met, that means the token has expired
        dispatch(authLogOut());
      } else {
        // Here we still have a valid token in our local storage
        // We divide timeTillTokenExpires by 1000 to change milliseconds to seconds
        const timeTillTokenExpires =
          (new Date(expirationDate).getTime() - new Date().getTime()) / 1000;
        dispatch(authSuccess(token, localStorage.getItem("userId")));
        dispatch(authTimeToExpire(timeTillTokenExpires));
      }
    }
  };
};
